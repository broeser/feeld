<?php

namespace Feeld\FieldCollection;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-14 at 13:19:48.
 */
class ValueMapperTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ValueMapper
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ValueMapper(new \stdClass(), array('a' => new ValueMapStrategy(ValueMapStrategy::MAP_PUBLIC, 'b')));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Feeld\FieldCollection\ValueMapper::hasProperty
     */
    public function testHasProperty() {
        $this->assertTrue($this->object->hasProperty('a'));
        $this->assertFalse($this->object->hasProperty('b'));
        $this->assertFalse($this->object->hasProperty('c'));
        
        try {
            $this->object->hasProperty(new \stdClass());
        } catch (\Wellid\Exception\DataType $ex) {
            return;
        }
        
        $this->fail('Expected DataType-Exception not thrown');
    }

    /**
     * @covers Feeld\FieldCollection\ValueMapper::set
     */
    public function testSet() {
        $this->assertTrue($this->object->set('a', 5));
        $this->assertFalse($this->object->set('b', 7));
        $this->assertEquals(5, $this->object->getObject()->b);
    }

    /**
     * @covers Feeld\FieldCollection\ValueMapper::getObject
     */
    public function testGetObject() {
        $this->assertInstanceOf('\stdClass', $this->object->getObject());
    }

    /**
     * @covers Feeld\FieldCollection\ValueMapper::getId
     * @covers Feeld\FieldCollection\ValueMapper::setId
     * @covers Feeld\FieldCollection\ValueMapper::hasId
     */
    public function testGetId() {
        $this->assertNull($this->object->getId());
        $this->assertFalse($this->object->hasId());
        $this->object->setId('personal_data');
        $this->assertTrue($this->object->hasId());
        $this->assertEquals('personal_data', $this->object->getId());
    }
}
