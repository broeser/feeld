<?php

namespace Feeld\DataType;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-24 at 16:35:41.
 */
class IntegerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Integer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Integer;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Feeld\DataType\Integer::getSanitizer
     * @covers Feeld\DataType\Integer::setSanitizer
     */
    public function testGetSanitizer() {
        $this->assertInstanceOf(get_class(new \Sanitor\Sanitizer(FILTER_DEFAULT)), $this->object->getSanitizer());
        $this->assertNotEquals(FILTER_SANITIZE_URL, $this->object->getSanitizer()->getSanitizeFilter());
        $this->object->setSanitizer(new \Sanitor\Sanitizer(FILTER_SANITIZE_URL));
        $this->assertEquals(FILTER_SANITIZE_URL, $this->object->getSanitizer()->getSanitizeFilter());
    }

    /**
     * @covers Feeld\DataType\Integer::getLastSanitizedValue
     * @todo   Implement testGetLastSanitizedValue().
     */
    public function testGetLastSanitizedValue() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Feeld\DataType\Integer::addValidator
     * @todo   Implement testAddValidator().
     */
    public function testAddValidator() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Feeld\DataType\Integer::addValidators
     * @todo   Implement testAddValidators().
     */
    public function testAddValidators() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Feeld\DataType\Integer::getValidators
     * @todo   Implement testGetValidators().
     */
    public function testGetValidators() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Feeld\DataType\Integer::validateValue
     * @todo   Implement testValidateValue().
     */
    public function testValidateValue() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Feeld\DataType\Integer::setMinLength
     * @covers Feeld\DataType\Integer::getMinLength
     * @covers Feeld\DataType\Integer::hasMinLength
     * @todo   Implement testSetMinLength().
     */
    public function testSetMinLength() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Feeld\DataType\Integer::setMaxLength
     * @covers Feeld\DataType\Integer::getMaxLength
     * @covers Feeld\DataType\Integer::hasMaxLength
     * @todo   Implement testSetMaxLength().
     */
    public function testSetMaxLength() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Feeld\DataType\Integer::setMin
     * @covers Feeld\DataType\Integer::getMin
     * @covers Feeld\DataType\Integer::hasMin
     * @covers Feeld\DataType\Integer::getValidators
     * @covers Feeld\DataType\Integer::validateValue
     */
    public function testSetMin() {
        $this->assertNull($this->object->getMin());
        $this->assertFalse($this->object->hasMin());
        $this->assertCount(1, $this->object->getValidators());
        $this->assertInstanceOf(get_class($this->object), $this->object->setMin(0));
        $this->assertTrue($this->object->hasMin());
        $this->assertEquals(0, $this->object->getMin());
        $validators = $this->object->getValidators();
        $this->assertCount(2, $validators);
        $lastValidator = end($validators);
        $this->assertInstanceOf('\Wellid\Validator\Min', $lastValidator);
        $this->assertTrue($this->object->validateValue(0)->hasPassed());
        $this->assertFalse($this->object->validateValue(-1)->hasPassed());
        $this->assertTrue($this->object->validateValue(1)->hasPassed());
    }

    /**
     * @covers Feeld\DataType\Integer::setMax
     * @covers Feeld\DataType\Integer::getMax
     * @covers Feeld\DataType\Integer::hasMax
     * @covers Feeld\DataType\Integer::getValidators
     * @covers Feeld\DataType\Integer::validateValue
     */
    public function testSetMax() {
        $this->assertNull($this->object->getMax());
        $this->assertFalse($this->object->hasMax());
        $this->assertCount(1, $this->object->getValidators());
        $this->assertInstanceOf(get_class($this->object), $this->object->setMax(42));
        $this->assertEquals(42, $this->object->getMax());
        $this->assertTrue($this->object->hasMax());
        $validators = $this->object->getValidators();
        $this->assertCount(2, $validators);
        $lastValidator = end($validators);
        $this->assertInstanceOf('\Wellid\Validator\Max', $lastValidator);
        $this->assertTrue($this->object->validateValue(42)->hasPassed());
        $this->assertTrue($this->object->validateValue(-100)->hasPassed());
        $this->assertFalse($this->object->validateValue(44)->hasPassed());
    }

    /**
     * @covers Feeld\DataType\Integer::setStep
     * @covers Feeld\DataType\Integer::getStep
     * @covers Feeld\DataType\Integer::hasStep
     * @todo   Implement testSetStep().
     */
    public function testSetStep() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
}
