<?php

namespace Feeld\DataType;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-24 at 16:35:41.
 */
class DateTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Date
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Date;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Feeld\DataType\Date::setMin
     * @covers Feeld\DataType\Date::getMin
     * @covers Feeld\DataType\Date::getValidators
     * @covers Feeld\DataType\Date::validateValue
     */
    public function testSetMin() {
        $this->assertNull($this->object->getMin());
        $this->assertCount(1, $this->object->getValidators());
        $this->assertInstanceOf(get_class($this->object), $this->object->setMin('2011-12-01'));
        $this->assertEquals('2011-12-01', $this->object->getMin());
        $validators = $this->object->getValidators();
        $this->assertCount(2, $validators);
        $lastValidator = end($validators);
        $this->assertInstanceOf('\Wellid\Validator\MinDate', $lastValidator);
        $this->assertTrue($this->object->validateValue('2011-12-01')->hasPassed());
        $this->assertFalse($this->object->validateValue('2010-01-08')->hasPassed());
        $this->assertTrue($this->object->validateValue('2014-12-01')->hasPassed());
    }

    /**
     * @covers Feeld\DataType\Date::setMax
     * @covers Feeld\DataType\Date::getMax
     * @covers Feeld\DataType\Date::getValidators
     * @covers Feeld\DataType\Date::validateValue
     */
    public function testSetMax() {
        $this->assertNull($this->object->getMax());
        $this->assertCount(1, $this->object->getValidators());
        $this->assertInstanceOf(get_class($this->object), $this->object->setMax('2011-12-01'));
        $this->assertEquals('2011-12-01', $this->object->getMax());
        $validators = $this->object->getValidators();
        $this->assertCount(2, $validators);
        $lastValidator = end($validators);
        $this->assertInstanceOf('\Wellid\Validator\MaxDate', $lastValidator);
        $this->assertTrue($this->object->validateValue('2011-12-01')->hasPassed());
        $this->assertTrue($this->object->validateValue('2010-01-08')->hasPassed());
        $this->assertFalse($this->object->validateValue('2014-12-01')->hasPassed());
    }

    /**
     * @covers Feeld\DataType\Date::setStep
     * @todo   Implement testSetStep().
     */
    public function testSetStep() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Feeld\DataType\Date::getSanitizer
     * @covers Feeld\DataType\Date::setSanitizer
     */
    public function testGetSanitizer() {
        $this->assertInstanceOf(get_class(new \Sanitor\Sanitizer(FILTER_DEFAULT)), $this->object->getSanitizer());
        $this->assertNotEquals(FILTER_SANITIZE_URL, $this->object->getSanitizer()->getSanitizeFilter());
        $this->object->setSanitizer(new \Sanitor\Sanitizer(FILTER_SANITIZE_URL));
        $this->assertEquals(FILTER_SANITIZE_URL, $this->object->getSanitizer()->getSanitizeFilter());
    }

    /**
     * @covers Feeld\DataType\Date::getLastSanitizedValue
     * @covers Feeld\DataType\Date::validateValue
     */
    public function testGetLastSanitizedValue() {
        $this->assertNull($this->object->getLastSanitizedValue());
        $this->assertTrue($this->object->validateValue('2009-' . PHP_EOL . '10-10')->hasPassed());
        $this->assertEquals('2009-10-10', $this->object->getLastSanitizedValue());
        $this->assertFalse($this->object->validateValue('2009-02-30')->hasPassed());
        $this->assertEquals('2009-02-30', $this->object->getLastSanitizedValue());
    }

    /**
     * @covers Feeld\DataType\Date::addValidator
     * @todo   Implement testAddValidator().
     */
    public function testAddValidator() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Feeld\DataType\Date::addValidators
     * @todo   Implement testAddValidators().
     */
    public function testAddValidators() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
